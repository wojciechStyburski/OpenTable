// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenTable.Infrastructure.DAL;

#nullable disable

namespace OpenTable.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(OpenTableDbContext))]
    [Migration("20230417144823_Capacity_Added")]
    partial class Capacity_Added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpenTable.Core.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OpenTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WeeklyOpenTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyOpenTableId");

                    b.ToTable("Reservations");

                    b.HasDiscriminator<string>("Type").HasValue("Reservation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OpenTable.Core.Entities.WeeklyOpenTable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Week")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeeklyOpenTables");
                });

            modelBuilder.Entity("OpenTable.Core.Entities.CustomerReservation", b =>
                {
                    b.HasBaseType("OpenTable.Core.Entities.Reservation");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CustomerReservation");
                });

            modelBuilder.Entity("OpenTable.Core.Entities.HolidayReservation", b =>
                {
                    b.HasBaseType("OpenTable.Core.Entities.Reservation");

                    b.HasDiscriminator().HasValue("HolidayReservation");
                });

            modelBuilder.Entity("OpenTable.Core.Entities.Reservation", b =>
                {
                    b.HasOne("OpenTable.Core.Entities.WeeklyOpenTable", null)
                        .WithMany("Reservations")
                        .HasForeignKey("WeeklyOpenTableId");
                });

            modelBuilder.Entity("OpenTable.Core.Entities.WeeklyOpenTable", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
